name: CI workflow

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master, develop]

permissions:
  id-token: write
  contents: read

jobs:
  build-and-push-images:
    name: Build a docker image and push it to ECR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ap-southeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Docker image to AWS ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
          IMAGE_TAG: latest
        run: |
          # Build a docker container and push it to ECR 
          echo $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile .
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  run-docker:
    needs: build-and-push-images
    name: Deploy the FE application on EC2 using Docker
    if: |
      ${{ needs.build-and-push-images.result == 'success' }}
    timeout-minutes: 30
    runs-on: self-hosted
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1

      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Deploy
        run: echo "Running deployment on branch ${{ github.ref }}"

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ap-southeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Setup SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      - name: SSH and deploy Docker container
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          IMAGE_TAG: latest
        run: |
          ssh -i "private_key.pem" $EC2_USER@$EC2_HOST
          # Pull the latest image from ECR and run the container
          docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker stop $ECR_REPOSITORY || true
          docker rm $ECR_REPOSITORY || true
          docker run -d --name $ECR_REPOSITORY \
              -e VITE_BE_BASE_URL=${{ secrets.VITE_BE_BASE_URL }} \
              -p 8081:8081 $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
